document.addEventListener('DOMContentLoaded', () => {
    const vocabulary = [
        { vietnamese: "u·ªëng n∆∞·ªõc", chinese: "ÂñùÊ∞¥" },
        { vietnamese: "ƒÉn c∆°m", chinese: "ÂêÉÈ•≠" },
        { vietnamese: "tr√† s·ªØa", chinese: "Â•∂Ëå∂" },
        { vietnamese: "bia", chinese: "Âï§ÈÖí" },
        { vietnamese: "r∆∞·ª£u", chinese: "ÈÖí" },
        { vietnamese: "ng√¢n h√†ng", chinese: "Èì∂Ë°å" }
    ];

    const gridContainer = document.getElementById('grid-container');
    const promptWordElement = document.getElementById('prompt-word');
    const messageElement = document.getElementById('message');
    const gridSize = 5;
    const totalCells = gridSize * gridSize; // 25

    let remainingWords = [...vocabulary]; // T·∫°o b·∫£n sao ƒë·ªÉ theo d√µi t·ª´ c√≤n l·∫°i
    let currentWordPair = null;
    let correctWordsFound = 0;

    // H√†m x√°o tr·ªôn m·∫£ng (Fisher-Yates shuffle)
    function shuffleArray(array) {
        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]]; // Swap elements
        }
    }

    // H√†m ch·ªçn t·ª´ ti·∫øp theo
    function selectNextWord() {
        if (remainingWords.length === 0) {
            messageElement.textContent = "Ch√∫c m·ª´ng! B·∫°n ƒë√£ ho√†n th√†nh t·∫•t c·∫£ c√°c t·ª´!";
            promptWordElement.textContent = "üéâ";
            // V√¥ hi·ªáu h√≥a c√°c √¥ c√≤n l·∫°i n·∫øu mu·ªën
            const cells = gridContainer.querySelectorAll('.grid-cell:not(.correct)');
            cells.forEach(cell => cell.style.pointerEvents = 'none');
            return false; // Kh√¥ng c√≤n t·ª´ n√†o
        }

        // Ch·ªçn ng·∫´u nhi√™n m·ªôt t·ª´ t·ª´ danh s√°ch c√≤n l·∫°i
        const randomIndex = Math.floor(Math.random() * remainingWords.length);
        currentWordPair = remainingWords[randomIndex];

        // Lo·∫°i b·ªè t·ª´ ƒë√£ ch·ªçn kh·ªèi danh s√°ch c√≤n l·∫°i
        remainingWords.splice(randomIndex, 1);

        // Hi·ªÉn th·ªã t·ª´ ti·∫øng Vi·ªát c·∫ßn t√¨m
        promptWordElement.textContent = currentWordPair.vietnamese;
        messageElement.textContent = ''; // X√≥a th√¥ng b√°o c≈©
        return true; // C√≤n t·ª´ ƒë·ªÉ ch∆°i
    }

    // H√†m ƒëi·ªÅn t·ª´ v√†o l∆∞·ªõi
    function populateGrid() {
        // L·∫•y t·∫•t c·∫£ c√°c t·ª´ ti·∫øng Trung t·ª´ danh s√°ch g·ªëc
        const allChineseWords = vocabulary.map(pair => pair.chinese);
        const correctChineseWord = currentWordPair.chinese;

        // T·∫°o danh s√°ch c√°c t·ª´ ng·∫´u nhi√™n ƒë·ªÉ ƒëi·ªÅn v√†o l∆∞·ªõi
        let gridWords = [correctChineseWord]; // B·∫Øt ƒë·∫ßu v·ªõi t·ª´ ƒë√∫ng

        // L·∫•y c√°c t·ª´ sai (distractors)
        let distractors = allChineseWords.filter(word => word !== correctChineseWord);
        shuffleArray(distractors);

        // ƒêi·ªÅn c√°c √¥ c√≤n l·∫°i b·∫±ng t·ª´ sai, cho ph√©p l·∫∑p l·∫°i n·∫øu c·∫ßn
        for (let i = 1; i < totalCells; i++) {
            // N·∫øu h·∫øt t·ª´ sai duy nh·∫•t, b·∫Øt ƒë·∫ßu d√πng l·∫°i t·ª´ ƒë·∫ßu danh s√°ch sai
            gridWords.push(distractors[(i - 1) % distractors.length]);
        }

        // X√°o tr·ªôn to√†n b·ªô danh s√°ch t·ª´ s·∫Ω hi·ªÉn th·ªã tr√™n l∆∞·ªõi
        shuffleArray(gridWords);

        // C·∫≠p nh·∫≠t n·ªôi dung v√† tr·∫°ng th√°i c√°c √¥
        const cells = gridContainer.querySelectorAll('.grid-cell');
        cells.forEach((cell, index) => {
            // Ch·ªâ c·∫≠p nh·∫≠t nh·ªØng √¥ ch∆∞a ƒë∆∞·ª£c ƒëo√°n ƒë√∫ng
            if (!cell.classList.contains('correct')) {
                cell.textContent = gridWords[index];
                cell.classList.remove('incorrect'); // X√≥a class sai n·∫øu c√≥ t·ª´ v√≤ng tr∆∞·ªõc
                 cell.style.pointerEvents = 'auto'; // Cho ph√©p click l·∫°i
            }
        });
    }

    // H√†m x·ª≠ l√Ω khi ng∆∞·ªùi ch∆°i nh·∫•p v√†o √¥
    function handleCellClick(event) {
        const clickedCell = event.target;

        // B·ªè qua n·∫øu √¥ ƒë√£ ƒë√∫ng ho·∫∑c kh√¥ng ph·∫£i l√† √¥ h·ª£p l·ªá
        if (!clickedCell.classList.contains('grid-cell') || clickedCell.classList.contains('correct')) {
            return;
        }

        const clickedWord = clickedCell.textContent;

        if (clickedWord === currentWordPair.chinese) {
            // ƒê√∫ng
            clickedCell.classList.add('correct');
            clickedCell.style.pointerEvents = 'none'; // V√¥ hi·ªáu h√≥a √¥ ƒë√∫ng
            correctWordsFound++;

            // Ch·ªù m·ªôt ch√∫t r·ªìi chuy·ªÉn sang t·ª´ ti·∫øp theo
            setTimeout(() => {
                if (selectNextWord()) {
                    populateGrid();
                }
            }, 500); // 0.5 gi√¢y

        } else {
            // Sai
            clickedCell.classList.add('incorrect');
            // X√≥a hi·ªáu ·ª©ng nh·∫•p nh√°y sau m·ªôt th·ªùi gian ng·∫Øn
            setTimeout(() => {
                clickedCell.classList.remove('incorrect');
            }, 500); // 0.5 gi√¢y
        }
    }

    // H√†m kh·ªüi t·∫°o tr√≤ ch∆°i
    function initGame() {
        gridContainer.innerHTML = ''; // X√≥a l∆∞·ªõi c≈© n·∫øu c√≥
        correctWordsFound = 0;
        remainingWords = [...vocabulary]; // Reset danh s√°ch t·ª´

        // T·∫°o c√°c √¥ trong l∆∞·ªõi
        for (let i = 0; i < totalCells; i++) {
            const cell = document.createElement('div');
            cell.classList.add('grid-cell');
            cell.addEventListener('click', handleCellClick);
            gridContainer.appendChild(cell);
        }

        // B·∫Øt ƒë·∫ßu v√≤ng ch∆°i ƒë·∫ßu ti√™n
        if (selectNextWord()) {
            populateGrid();
        }
    }

    // B·∫Øt ƒë·∫ßu tr√≤ ch∆°i khi trang t·∫£i xong
    initGame();

});